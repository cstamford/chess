using Chess.Framework;
using System.Collections.Generic;

namespace Chess.Representation.Pieces
{
    /// <summary>
    /// An abstract class which implements IPiece and provides the
    /// basic core data fields which each chess piece should have.
    /// </summary>
    public abstract class Piece : IPiece
    {
        /// <summary>
        /// Gets or sets the team which this piece belongs to.
        /// </summary>
        public PieceType Type
        {
            get { return _type; }
            set { _type = value; }
        }

        /// <summary>
        /// Gets or sets the type of chess piece.
        /// </summary>
        public Team Team
        {
            get { return _team; }
            set { _team = value; }
        }

        /// <summary>
        /// Gets or sets the relative weight of this piece, as per Hans Berliner's system.
        /// </summary>
        public float Value
        {
            get { return _value; }
            set { _value = value; }
        }

        /// <summary>
        /// Gets the textual representation of this piece.
        /// </summary>
        public abstract string AsText { get; }

        /// <summary>
        /// Gets the list of historical moves for this piece.
        /// </summary>
        List<Move> IPiece.Moves
        {
            get { return _moves; }
        }

        /// <summary>
        /// Gets the immutable collection of historical moves for this piece.
        /// </summary>
        public IReadOnlyCollection<Move> Moves
        {
            get { return _moves; }
        }

        /// <summary>
        /// Returns an immutable collection of possible moves for this piece.
        /// </summary>
        /// <param name="currentPosition">The position of the piece.</param>
        /// <returns>An array containing valid moves for this piece.</returns>
        public abstract IReadOnlyCollection<Move> ValidMoves(Vector2 currentPosition);

        /// <summary>
        /// The team which this piece belongs to.
        /// </summary>
        protected PieceType _type;

        /// <summary>
        /// The type of chess piece.
        /// </summary>
        protected Team _team;

        /// <summary>
        /// The relative weight of this piece, as per Hans Berliner's system.
        /// </summary>
        protected float _value;

        /// <summary>
        /// The list of historical moves for this piece.
        /// </summary>
        protected List<Move> _moves = new List<Move>();

        /// <summary>
        /// The vector that was used in the last call of <see cref="ValidMoves"/>.
        /// </summary>
        protected Vector2 _cachedPosition;

        /// <summary>
        /// A pointer to the array generated by the last call of <see cref="ValidMoves"/>.
        /// Return this array rather than generating a new one if this array
        /// was generated at the current <see cref="_cachedPosition"/>.
        /// </summary>
        protected Move[] _cachedMoves;

        /// <summary>
        /// Constructs and initialises the data fields of a chess piece.
        /// </summary>
        /// <param name="type">The provided type of piece.</param>
        /// <param name="team">The provided team.</param>
        /// <param name="value">The weight of this piece.</param>
        protected Piece(PieceType type, Team team = Team.Invalid, float value = 1.0f)
        {
            _type = type;
            _team = team;
            _value = value;
        }
    }
}